{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164 \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u0440\u043c\u0430\u0446\u0438\u044f \u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d TypeScript, React, CSS-Modules (SASS). \u0414\u043b\u044f \u0440\u043e\u0443\u0442\u0438\u043d\u0433\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f React Router, \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 - axios. SignInPage.tsx \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 const handleRegister = async () => { try { const response = await axios.post(\"http://127.0.0.1:8000/auth/users/\", { email: email, username: userName, password: password, }); if (response.status === 201) { const userId = response.data.id; localStorage.setItem(\"authToken\", response.data.auth_token); localStorage.setItem(\"userId\", userId); localStorage.setItem(\"username\", userName); alert(\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430\"); navigate(\"/main\"); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:\", error); } }; \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u043d\u0430 const handleLogin = async () => { try { const loginResponse = await axios.post( \"http://127.0.0.1:8000/auth/token/login/\", { username: userName, password: password, } ); if (loginResponse.status === 200) { localStorage.setItem(\"authToken\", loginResponse.data.auth_token); const userResponse = await axios.get( \"http://127.0.0.1:8000/auth/users/me/\", { headers: { Authorization: `Token ${loginResponse.data.auth_token}`, }, } ); if (userResponse.status === 200) { const userId = userResponse.data.id; localStorage.setItem(\"userId\", userId); localStorage.setItem(\"username\", userName); alert(\"\u0412\u0445\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e\"); navigate(\"/main\"); } } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0432\u0445\u043e\u0434\u0435:\", error); } }; MainPage.tsx \u0424\u0443\u043d\u043a\u0446\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 useEffect(() => { const fetchConferences = async () => { try { if (!authToken) { console.error(\"\u0422\u043e\u043a\u0435\u043d \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 localStorage\"); return; } const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get( \"http://127.0.0.1:8000/main/conferences/\", { headers } ); if (response.status === 200) { const myConfs = response.data.filter( (conference: ConferenceData) => conference.author === username ); const otherConfs = response.data.filter( (conference: ConferenceData) => conference.author !== username ); setMyConferences(myConfs); setConferences(otherConfs); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439:\", error); } }; fetchConferences(); }, [authToken, username]); ConferenceCreatePage.tsx \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043c \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 (\u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438) useEffect(() => { const fetchTopics = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get(\"http://127.0.0.1:8000/main/topics/\", { headers, }); setTopics(response.data); } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0442\u0435\u043c:\", error); } }; fetchTopics(); }, [authToken]); \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => { event.preventDefault(); const headers = { Authorization: `Token ${authToken}`, }; const conferenceData = { title, location, start_date: startDate, end_date: endDate, description, participation_conditions: conditions, topics: selectedTopic, }; try { const response = await axios.post( \"http://127.0.0.1:8000/main/conferences/\", conferenceData, { headers } ); if (response.status === 201) { alert(\"\u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0430\"); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438:\", error); } }; ConferencePage.tsx \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 useEffect(() => { const fetchConferenceDetails = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get( `http://127.0.0.1:8000/main/conferences/${id}/`, { headers } ); if (response.status === 200) { setConference(response.data); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438:\", error); } }; const fetchReviews = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get( `http://127.0.0.1:8000/main/reviews/`, { headers } ); if (response.status === 200) { const filteredReviews = response.data.filter( (review: Review) => review.conference.id === Number(id) ); setReviews(filteredReviews); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\", error); } }; fetchConferenceDetails(); fetchReviews(); }, [id, authToken]); \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 const handleReviewSubmit = async ( event: React.FormEvent<HTMLFormElement> ) => { event.preventDefault(); try { const headers = { Authorization: `Token ${authToken}`, }; const currentDate = new Date().toISOString().split(\"T\")[0]; const reviewData = { text: reviewText, comment_text: commentText, rating: reviewRating, conference: Number(id), comment_date: currentDate, user: userId, }; const response = await axios.post( `http://127.0.0.1:8000/main/reviews/`, reviewData, { headers } ); if (response.status === 201) { setReviews([...reviews, response.data]); setReviewText(\"\"); setCommentText(\"\"); setReviewRating(1); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043e\u0442\u0437\u044b\u0432\u0430:\", error); } }; Conference.tsx \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e const handleRegistration = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const registrationData = { user: userId, conference: id, topic: topics[0].id, }; const response = await axios.post( \"http://127.0.0.1:8000/main/registrations/\", registrationData, { headers } ); if (response.status === 201) { alert(\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!\"); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e:\", error); alert(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438!\"); } };","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"#no4","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21164"},{"location":"#_1","text":"\u0414\u043b\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0444\u0440\u043e\u043d\u0442\u0435\u043d\u0434\u0430 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d TypeScript, React, CSS-Modules (SASS). \u0414\u043b\u044f \u0440\u043e\u0443\u0442\u0438\u043d\u0433\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f React Router, \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043d\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 - axios.","title":"\u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u0440\u043c\u0430\u0446\u0438\u044f"},{"location":"#signinpagetsx","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 const handleRegister = async () => { try { const response = await axios.post(\"http://127.0.0.1:8000/auth/users/\", { email: email, username: userName, password: password, }); if (response.status === 201) { const userId = response.data.id; localStorage.setItem(\"authToken\", response.data.auth_token); localStorage.setItem(\"userId\", userId); localStorage.setItem(\"username\", userName); alert(\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u0430\"); navigate(\"/main\"); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438:\", error); } }; \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043b\u043e\u0433\u0438\u043d\u0430 const handleLogin = async () => { try { const loginResponse = await axios.post( \"http://127.0.0.1:8000/auth/token/login/\", { username: userName, password: password, } ); if (loginResponse.status === 200) { localStorage.setItem(\"authToken\", loginResponse.data.auth_token); const userResponse = await axios.get( \"http://127.0.0.1:8000/auth/users/me/\", { headers: { Authorization: `Token ${loginResponse.data.auth_token}`, }, } ); if (userResponse.status === 200) { const userId = userResponse.data.id; localStorage.setItem(\"userId\", userId); localStorage.setItem(\"username\", userName); alert(\"\u0412\u0445\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d \u0443\u0441\u043f\u0435\u0448\u043d\u043e\"); navigate(\"/main\"); } } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0432\u0445\u043e\u0434\u0435:\", error); } };","title":"SignInPage.tsx"},{"location":"#mainpagetsx","text":"\u0424\u0443\u043d\u043a\u0446\u0438 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 useEffect(() => { const fetchConferences = async () => { try { if (!authToken) { console.error(\"\u0422\u043e\u043a\u0435\u043d \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 localStorage\"); return; } const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get( \"http://127.0.0.1:8000/main/conferences/\", { headers } ); if (response.status === 200) { const myConfs = response.data.filter( (conference: ConferenceData) => conference.author === username ); const otherConfs = response.data.filter( (conference: ConferenceData) => conference.author !== username ); setMyConferences(myConfs); setConferences(otherConfs); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0439:\", error); } }; fetchConferences(); }, [authToken, username]);","title":"MainPage.tsx"},{"location":"#conferencecreatepagetsx","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0442\u0435\u043c \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 (\u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0433\u043e \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438) useEffect(() => { const fetchTopics = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get(\"http://127.0.0.1:8000/main/topics/\", { headers, }); setTopics(response.data); } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u0442\u0435\u043c:\", error); } }; fetchTopics(); }, [authToken]); \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => { event.preventDefault(); const headers = { Authorization: `Token ${authToken}`, }; const conferenceData = { title, location, start_date: startDate, end_date: endDate, description, participation_conditions: conditions, topics: selectedTopic, }; try { const response = await axios.post( \"http://127.0.0.1:8000/main/conferences/\", conferenceData, { headers } ); if (response.status === 201) { alert(\"\u041a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044f \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0430\"); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438:\", error); } };","title":"ConferenceCreatePage.tsx"},{"location":"#conferencepagetsx","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438 \u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0441 \u0431\u044d\u043a\u0435\u043d\u0434\u0430 useEffect(() => { const fetchConferenceDetails = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get( `http://127.0.0.1:8000/main/conferences/${id}/`, { headers } ); if (response.status === 200) { setConference(response.data); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u0438:\", error); } }; const fetchReviews = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const response = await axios.get( `http://127.0.0.1:8000/main/reviews/`, { headers } ); if (response.status === 200) { const filteredReviews = response.data.filter( (review: Review) => review.conference.id === Number(id) ); setReviews(filteredReviews); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\", error); } }; fetchConferenceDetails(); fetchReviews(); }, [id, authToken]); \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0444\u043e\u0440\u043c\u044b \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043e\u0442\u0437\u044b\u0432\u0430 const handleReviewSubmit = async ( event: React.FormEvent<HTMLFormElement> ) => { event.preventDefault(); try { const headers = { Authorization: `Token ${authToken}`, }; const currentDate = new Date().toISOString().split(\"T\")[0]; const reviewData = { text: reviewText, comment_text: commentText, rating: reviewRating, conference: Number(id), comment_date: currentDate, user: userId, }; const response = await axios.post( `http://127.0.0.1:8000/main/reviews/`, reviewData, { headers } ); if (response.status === 201) { setReviews([...reviews, response.data]); setReviewText(\"\"); setCommentText(\"\"); setReviewRating(1); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u043e\u0442\u0437\u044b\u0432\u0430:\", error); } };","title":"ConferencePage.tsx"},{"location":"#conferencetsx","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e const handleRegistration = async () => { try { const headers = { Authorization: `Token ${authToken}`, }; const registrationData = { user: userId, conference: id, topic: topics[0].id, }; const response = await axios.post( \"http://127.0.0.1:8000/main/registrations/\", registrationData, { headers } ); if (response.status === 201) { alert(\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!\"); } } catch (error) { console.error(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 \u043a\u043e\u043d\u0444\u0435\u0440\u0435\u043d\u0446\u0438\u044e:\", error); alert(\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438!\"); } };","title":"Conference.tsx"}]}